name: Create Repo for RustDesk latest

on:
  schedule:
    # Every Saturday at 3AM UTC
    - cron: "0 3 * * 6"
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  workflow_dispatch:
  
env:
    REPO_NAME: xlion-rustdesk-latest-apt-repo
    CODENAME: main
    COMPONENTS: main
    ARCHITECTURES: amd64 arm64 armhf i386
    # armhf is ARMv7 (32bit) 

permissions:
    contents: read

jobs:
    verify:
      name: Verify container
      runs-on: ubuntu-24.04-arm
      steps:
        - name: Install Cosign
          uses: sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a # v3.8.1

        - name: Verify
          run: |
            cosign verify --rekor-url=https://rekor.sigstore.dev \
            --certificate-identity-regexp "https://github.com/xlionjuan/.*" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            ghcr.io/xlionjuan/fedora-createrepo-image:latest

    build:
      runs-on: ubuntu-24.04-arm
      needs: verify
      container: ghcr.io/xlionjuan/fedora-createrepo-image:latest
      steps:
        - name: Checkout code
          uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
          with:
            persist-credentials: false

        - name: Download RustDesk
          run: dpkg-deb --build rustdesk-server-meta rustdesk-server-meta.deb & bash rustdesk_latest.sh & bash rustdesk-server_latest.sh

        - name: Create apt repository
          uses: xlionjuan/apt-repo-action@6904bef9c1e836ccccaac1f541bacf8f58be66ff
          id: create-apt-repo
          with:
            repo-name: ${{ env.REPO_NAME }}
            signing-key: ${{ secrets.SIGNING_KEY }}
            codename: ${{ env.CODENAME }}
            components: ${{ env.COMPONENTS }}
            architectures: ${{ env.ARCHITECTURES }}

        - name: Copy wwwroot to the output folder
          env:
            APT_REPO_OUTPUT_DIR: ${{ steps.create-apt-repo.outputs.dir }}
          run: cp -r wwwroot/* ${APT_REPO_OUTPUT_DIR}

        - name: Upload Pages artifact
          uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3.0.1
          with:
            name: github-pages
            path: ${{ steps.create-apt-repo.outputs.dir }}

        - name: Publish Artifacts
          uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
          with:
            name: cf_r2
            path: ${{ steps.create-apt-repo.outputs.dir }}
            if-no-files-found: error

    deploy:
      name: Deploy to GitHub Pages
      if: github.event_name != 'pull_request'
      environment:
        name: github-pages
        url: ${{ steps.deployment.outputs.page_url }}
      runs-on: ubuntu-24.04-arm
      needs: build
      permissions:
        contents: read
        pages: write
        id-token: write
      steps:
        - name: Deploy to GitHub Pages
          id: deployment
          uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4.0.5

    push-to-cf-r2:
      name: Push to Cloudflare R2
      if: github.event_name != 'pull_request'
      runs-on: ubuntu-24.04-arm
      needs: build
      steps:
        - name: Download artifact
          uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
          with:
            pattern: cf_r2
            path: src-dir/latest
            merge-multiple: true
    
        - name: Upload to Cloudflare R2
          uses: ryand56/r2-upload-action@47013c9cf0012876409579ed17399005aa287b48 # v1.3.4
          with:
            r2-account-id: ${{ secrets.R2_ACCOUNT_ID }}
            r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
            r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
            r2-bucket: ${{ secrets.R2_BUCKET }}
            keep-file-fresh: true
            source-dir: src-dir
            destination-dir: ./
